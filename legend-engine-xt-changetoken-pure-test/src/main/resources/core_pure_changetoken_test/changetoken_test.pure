// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::pure::changetoken::*;
import meta::pure::constraints::functions::*;
import meta::pure::changetoken::cast_generation::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::compiler::*;
import meta::pure::functions::collection::*;
import meta::pure::changetoken::tests::*;
import meta::external::language::java::factory::project::*;

function <<test.Test>> meta::pure::changetoken::tests::testToString():Boolean[1]
{
  assertEquals(
    'AddField(class=meta::domain::MyClass,fieldName=myNewField,fieldType=Number,'
      + 'defaultValue=ConstValue(value=100),safeCast=true)',
    ^AddField(
      fieldName='myNewField', fieldType='Number', class='meta::domain::MyClass',
      defaultValue=^ConstValue(value=100), safeCast=true)->toString()
  );
}

function <<test.Test>> meta::pure::changetoken::tests::testConstraint():Boolean[1]
{
  assertValidConstraint(Versions, [^KeyValue(key='versions', value=[^Version(version='1'), ^Version(version='2', prevVersion='1')])], 'linearVersions');
  assertInvalidConstraint(Versions, [^KeyValue(key='versions', value=[^Version(version='1'), ^Version(version='2')])], 'linearVersions');
}

Class meta::pure::changetoken::tests::SampleClass
{
  abc : Integer[1];  
}

// This is test Versions: AddField with ConstValue(100)
function meta::pure::changetoken::tests::getVersions():Versions[1]
{
  ^Versions(
    versions=[
      ^Version( // base version
        version='ftdm:abcdefg123'
      ),
      ^Version(
        version='ftdm:abcdefg456',
        prevVersion='ftdm:abcdefg123',
        changeTokens=[
          ^AddField(
            class='meta::pure::changetoken::tests::SampleClass',
            fieldName='abc',
            fieldType='Integer[1]',
            safeCast=true,
            defaultValue=^ConstValue(value=100)
          )
        ]
      )
    ]
  ); 
}

// This is test Versions: AddField with CopyValue(../existingValue)
function meta::pure::changetoken::tests::getVersions2():Versions[1]
{
  ^Versions(
    versions=[
      ^Version( // base version
        version='ftdm:abcdefg123'
      ),
      ^Version(
        version='ftdm:abcdefg456',
        prevVersion='ftdm:abcdefg123',
        changeTokens=[
          ^AddField(
            class='meta::pure::changetoken::tests::SampleClass',
            fieldName='abc',
            fieldType='Integer[1]',
            safeCast=true,
            defaultValue=^CopyValue(source=^RelativeFieldReference(path='../existingValue'))
          )
        ]
      )
    ]
  ); 
}

// This is test Versions: ChangeFieldType from Integer[1] to String[1]
function meta::pure::changetoken::tests::getVersions3():Versions[1]
{
  ^Versions(
    versions=[
      ^Version( // base version
        version='ftdm:abcdefg123'
      ),
      ^Version(
        version='ftdm:abcdefg456',
        prevVersion='ftdm:abcdefg123',
        changeTokens=[
          ^ChangeFieldType(
            class='meta::pure::changetoken::tests::SampleClass',
            fieldName='abc',
            oldFieldType='Integer[1]',
            newFieldType='String[1]'
          )
        ]
      )
    ]
  ); 
}

// This is test Versions: RenameField
function meta::pure::changetoken::tests::getVersions4():Versions[1]
{
  ^Versions(
    versions=[
      ^Version( // base version
        version='ftdm:abcdefg123'
      ),
      ^Version(
        version='ftdm:abcdefg456',
        prevVersion='ftdm:abcdefg123',
        changeTokens=[
          ^RenameField(
            class='meta::pure::changetoken::tests::SampleClass',
            oldFieldName='abc',
            newFieldName='xyz'
          )
        ]
      )
    ]
  ); 
}

Class
{
  meta::external::language::java::metamodel::annotations::AnnotationJavaInfo.javaClass = 'org.junit.Test'
}
meta::pure::changetoken::tests::Test extends meta::external::language::java::metamodel::Annotation
{
}

function <<access.private>> meta::pure::changetoken::tests::generateTestClass(
  project:Project[1], packageName:String[1], testClassName:String[1], testedClassName:String[1], inp:String[1], out:String[1]):Project[1]
{
  $project->addClass('src/test/java', 
    javaClass(['public'], javaPackage($packageName), $testClassName)
    ->addMethod(
      javaMethod(['public', 'static'], javaVoid(), 'main', [],
          // 'var res = new org.junit.runner.JUnitCore().run(' + $testClassName + '.class);\n' +
          // 'if (!res.wasSuccessful()) throw new RuntimeException("Something failed");'
          // 'System.out.println("hello123");'
          'org.junit.runner.JUnitCore runner = new org.junit.runner.JUnitCore();'
        )
    )
    ->addMethod(
      javaMethod(['public'], javaVoid(), 'testUpcast', [],
        'org.junit.Assert.assertEquals(true, true);'        
      )
      ->addAnnotation(^meta::pure::changetoken::tests::Test())
    )
  )
}

function <<test.Test>> meta::pure::changetoken::tests::testGenerateCast():Boolean[1]
{
//  let f = meta::pure::changetoken::tests::getVersions4__Versions_1_;
//  print($f->elementToPath());

  let packageName = 'org.finos.legend.engine.generated.meta.pure.changetoken.cast_generation';
  let testedClassName = 'TestCastFunction';
  let testClassName = 'GenerateCast4';

  let project = generateCast(meta::pure::changetoken::tests::getVersions4__Versions_1_, 'src/test/java', 
      $packageName, $testedClassName)
    ->generateTestClass(
      $packageName,
      $testClassName,
      $testedClassName,
      '{\n' +
      '  "version": "ftdm:abcdefg123",\n' +
      '  "@type": "meta::pure::changetoken::tests::SomeClassWithAnArray",\n' +
      '  "array": [\n' +
      '    {\n' +
      '      "@type": "meta::pure::changetoken::tests::OuterClass",\n' +
      '      "existingValue": "someValue",\n' +
      '      "innerObject": {\n' +
      '        "@type": "meta::pure::changetoken::tests::SampleClass",\n' +
      '        "abc": 123\n' +
      '      }\n' +
      '    }\n' +
      '  ]\n' +
      '}\n',

      '{\n' +
      '  "version": "ftdm:abcdefg456",\n' +
      '  "@type": "meta::pure::changetoken::tests::SomeClassWithAnArray",\n' +
      '  "array": [\n' +
      '    {\n' +
      '      "@type": "meta::pure::changetoken::tests::OuterClass",\n' +
      '      "existingValue": "someValue",\n' +
      '      "innerObject": {\n' +
      '        "@type": "meta::pure::changetoken::tests::SampleClass",\n' +
      '        "abc": 123,\n' +
      '        "xyz": 123\n' +
      '      }\n' +
      '    }\n' +
      '  ]\n' +
      '}\n'
    );

  printProject($project);
  assertInstanceOf($project, Project);

  // let res = compileJava($project->allClasses()->map(c|$c->inferImports()), 
  //   ^CompilationConfiguration(classpath='D:/Code/.m2/repository/junit/junit/4.13.1/junit-4.13.1.jar')
  // );
  // print($res);
  // assert($res.successful);

  let res = compileAndExecuteJava($project->allClasses()->map(c|$c->inferImports()), 
    ^CompilationConfiguration(classpath='D:/Code/.m2/repository/junit/junit/4.13.1/junit-4.13.1.jar'),
    ^ExecutionConfiguration(class=$packageName + '.' + $testClassName,method='main'));
  print($res);
  assert(and($res.compilationResult.successful, $res.executionResult.successful->toOne()));
}
